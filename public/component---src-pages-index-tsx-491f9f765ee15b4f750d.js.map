{"version":3,"sources":["webpack:///./src/components/post/PostTitle.style.tsx","webpack:///./src/components/post/PostTitle.tsx","webpack:///./src/components/blogList.tsx","webpack:///./src/components/home/home.tsx","webpack:///./src/pages/index.tsx"],"names":["BlogCardTitle","BlogCardLink","Link","memo","text","to","blog","blogPosts","props","map","post","key","node","id","frontmatter","title","timeToRead","Array","from","_","i","excerpt","date","Home","home","keywords","length","name","content","context","render","className","this","header","data","allFile","edges","childDataJson","allMarkdownRemark","React","pageQuery"],"mappings":"yNAGaA,EAAgB,sBAAH,oBAAG,CAAH,+NAmBbC,EAAe,YAAOC,IAAP,sBAAH,+G,YCTVC,kBARG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAChB,YAACH,EAAD,CAAcI,GAAI,QAChB,YAACL,EAAD,KACE,sBAAKI,QCkBID,kBAnBE,SAAC,GAAa,IAAXG,EAAW,EAAXA,KAOZC,EAAYD,EAAKE,MAAMC,KAAI,SAACC,GAAD,OAC/B,YAAC,IAAD,CAAUC,IAAKD,EAAKE,KAAKC,IACvB,YAAC,EAAD,CAAWT,KAAMM,EAAKE,KAAKE,YAAYC,QACvC,wBAToBC,EASCN,EAAKE,KAAKI,WARjCC,MAAMC,KAAKD,MAAMD,IAAa,SAACG,EAAGC,GAAJ,OAE1B,kCAOF,qBAAIV,EAAKE,KAAKS,SACd,YAAC,IAAD,KAAOX,EAAKE,KAAKE,YAAYQ,OAXV,IAACN,KAexB,OAAO,uBAAMT,M,qBCjBFgB,EAAO,SAACC,GACnB,IAAMT,EAAQ,sBAERU,EACJ,sFAEF,OAAoB,IAAhBD,EAAKE,OAEL,YAAC,IAAD,KACE,YAAC,IAAD,KACE,yBAAQX,GACR,oBAAMY,KAAM,cAAeC,QATtB,cAUL,oBAAMD,KAAM,WAAYC,QAASH,MAMrC,YAAC,IAAD,KACE,YAAC,IAAD,KACE,yBAAQV,GACR,oBAAMY,KAAM,cAAeC,QAnBtB,cAoBL,oBAAMD,KAAM,WAAYC,QAASH,KAEnC,YAAC,EAAD,CAAUnB,KAAMkB,M,oIC4BtB,WAAYhB,EAAYqB,GAAc,OACpC,YAAMrB,EAAOqB,IADuB,K,0GAI/BC,OAAP,WACE,OACE,mBAAKC,UAAW,WACd,YAAC,IAAD,MACA,YAAC,aAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAOvB,MAAOwB,KAAKxB,QACnB,YAAC,IAAD,CACEyB,OACED,KAAKxB,MAAM0B,KAAKC,QAAQC,MAAM,GAAGxB,KAAKyB,cAAcJ,SAGxD,YAAC,EAAD,CAAMzB,MAAOwB,KAAKxB,MAAM0B,KAAKI,kBAAkBF,UAGnD,YAAC,IAAD,Q,GApBqBG,aA0BhBC,EAAY","file":"component---src-pages-index-tsx-491f9f765ee15b4f750d.js","sourcesContent":["import styled from '@emotion/styled';\nimport Link from 'gatsby-link';\n\nexport const BlogCardTitle = styled.header`\n  display: inline-block;\n  padding: 0.5rem 0rem;\n  max-width: 50vw;\n  text-align: left;\n  z-index: 5;\n  \n  border-top-left-radius: 5px;\n  border-top-right-radius: 5px;\n  \n  position: absolute\n  top: -5rem;\n  left: 0;\n  \n  h5 {\n    margin: 0 0 0 1rem;;\n  }\n`;\n\nexport const BlogCardLink = styled(Link)`\n  text-decoration: none;\n\n  h2 {\n    transition: color 200ms ease-in;\n  }\n\n  &:hover {\n    h2 {\n      color: #0078d7;\n    }\n  }\n`;\n","import * as React from 'react';\nimport { BlogCardLink, BlogCardTitle } from './PostTitle.style';\nimport { memo } from 'react';\n\n// @ts-ignore\nconst PostTitle = ({ text }) => (\n  <BlogCardLink to={'TODO'}>\n    <BlogCardTitle>\n      <h2>{text}</h2>\n    </BlogCardTitle>\n  </BlogCardLink>\n);\n\nexport default memo(PostTitle);\n","import * as React from 'react';\nimport { BlogCard, Cite } from '../styles/styles';\nimport { memo } from 'react';\nimport PostTitle from './post/PostTitle';\nimport { IEdge } from '../pages';\n\n// @ts-ignore\nconst BlogList = ({ blog }) => {\n  const generateCoffee = (timeToRead: number) =>\n    Array.from(Array(timeToRead), (_, i) =>\n      (\n        <span>â˜•</span>\n      ));\n\n  const blogPosts = blog.props.map((post: IEdge) => (\n    <BlogCard key={post.node.id}>\n      <PostTitle text={post.node.frontmatter.title} />\n      <div>{generateCoffee(post.node.timeToRead)}</div>\n      <p>{post.node.excerpt}</p>\n      <Cite>{post.node.frontmatter.date}</Cite>\n    </BlogCard>\n  ));\n\n  return <div>{blogPosts}</div>;\n};\n\nexport default memo(BlogList);\n","import * as React from 'react';\nimport { Main } from '../../styles/styles';\nimport BlogList from '../blogList';\nimport Helmet from 'react-helmet';\nimport { IEdge } from '../../pages';\n\nexport const Home = (home: Array<IEdge>) => {\n  const title = 'Elliot Evans - Home';\n  const desc = 'Home Page';\n  const keywords =\n    'Front End Developer, Web Application Developer, Web Developer, Javascript Developer';\n\n  if (home.length === 0) {\n    return (\n      <Main>\n        <Helmet>\n          <title>{title}</title>\n          <meta name={'description'} content={desc} />\n          <meta name={'keywords'} content={keywords} />\n        </Helmet>\n      </Main>\n    );\n  } else {\n    return (\n      <Main>\n        <Helmet>\n          <title>{title}</title>\n          <meta name={'description'} content={desc} />\n          <meta name={'keywords'} content={keywords} />\n        </Helmet>\n        <BlogList blog={home} />\n      </Main>\n    );\n  }\n};\n","import * as React from 'react';\nimport { graphql } from 'gatsby';\nimport { Main } from '../styles/styles';\nimport Footer from '../components/footer';\n\n// default style stuff\nimport '../styles/index.css';\n\n// home stuff\nimport Navigation from '../components/navigation';\nimport { Home } from '../components/home/home';\nimport Blobs from '../blobs/blobs';\nimport Banner from '../components/banner';\n\ninterface IndexPageProps {\n  data: {\n    allMarkdownRemark: {\n      edges: Array<IEdge>;\n    };\n    allFile: IHeaderQuery;\n  };\n}\n\ninterface IHeaderQuery {\n  edges: Array<IHeaderNode>;\n}\n\ninterface IHeaderNode {\n  node: {\n    id: string;\n    childDataJson: {\n      id: string;\n      header: IHeader;\n    };\n  };\n}\n\nexport interface IEdge {\n  node: INode;\n}\n\nexport interface INode {\n  excerpt: string;\n  timeToRead: number;\n  frontmatter: {\n    date: string;\n    title: string;\n  };\n  id: string;\n}\n\nexport interface IHeader {\n  icon: string;\n  heading: string;\n  subHeading: string;\n}\n\nexport default class extends React.Component<IndexPageProps, {}> {\n  constructor(props: any, context: any) {\n    super(props, context);\n  }\n\n  public render() {\n    return (\n      <div className={'appGrid'}>\n        <Navigation />\n        <React.StrictMode>\n          <Main>\n            <Blobs props={this.props} />\n            <Banner\n              header={\n                this.props.data.allFile.edges[0].node.childDataJson.header\n              }\n            />\n            <Home props={this.props.data.allMarkdownRemark.edges} />\n          </Main>\n        </React.StrictMode>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          excerpt\n          timeToRead\n        }\n      }\n    }\n    allFile(\n      filter: { name: { eq: \"header\" }, sourceInstanceName: { eq: \"data\" } }\n    ) {\n      edges {\n        node {\n          id\n          childDataJson {\n            id\n            header {\n              icon\n              heading\n              subHeading\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}