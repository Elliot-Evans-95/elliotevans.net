{"version":3,"sources":["webpack:///./src/components/contact/pageHeader.tsx","webpack:///./src/components/projects/projectList.style.tsx","webpack:///./src/components/project/Project.tsx","webpack:///./src/components/projects/projectList.tsx","webpack:///./src/components/projects/projects.style.tsx","webpack:///./src/components/projects/projects.tsx","webpack:///./src/pages/projects.tsx"],"names":["memo","heading","subHeading","ProjectsListWrapper","project","index","src","frontmatter","featuredImage","className","alt","title","excerpt","projects","map","key","node","id","renderProjects","ProjectsMain","props","context","render","name","content","pageType","PageType","DEFAULT","header","this","data","allFile","edges","childSiteJson","allMarkdownRemark","React","pageQuery"],"mappings":"6FAAA,wCAgBeA,oBAPI,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,WAAZ,OACjB,YAAC,IAAD,KACE,sBAAKD,GACL,sBAAKC,Q,iICVIC,EAAsB,uBAAH,mBAAG,CAAH,wG,YCyCjBH,kBApBC,SAACI,GACf,IAA2BC,EAE3B,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CACEC,IAAKF,EAAQA,QAAQG,YAAYC,cACjCC,WANqBJ,EAMQD,EAAQC,MALzCA,EAAQ,EAAI,aAAe,aAMvBK,IAAI,eAEN,YAAC,IAAD,KACGN,EAAQA,QAAQG,YAAYI,OAE/B,YAAC,IAAD,KACE,qBAAIP,EAAQA,QAAQQ,cClBbZ,kBATK,SAACa,GAMnB,OAAO,YAACV,EAAD,KALgB,SAACU,GAAD,OACrBA,EAASA,SAASC,KAAI,SAACV,EAASC,GAAV,OACpB,YAAC,EAAD,CAASU,IAAKX,EAAQY,KAAKC,GAAIb,QAASA,EAAQY,KAAMX,MAAOA,OAGpCa,CAAeL,O,YCdjCM,EAAe,oBAAH,oBAAG,CAAH,qICmBVnB,kBAVE,SAACa,GAAD,OACf,YAACM,EAAD,KACE,YAAC,IAAD,CACElB,QAAS,WACTC,WAAY,4CAEd,YAAC,EAAD,CAAaW,SAAUA,EAASO,Y,2ICFlC,WAAYA,EAAYC,GAAiB,OACvC,YAAMD,EAAOC,IAD0B,K,0GAIlCC,OAAP,WAME,OACE,mBAAKb,UAAW,WACd,YAAC,IAAD,KACE,yBARQ,0BASR,oBAAMc,KAAM,cAAeC,QARpB,iBASP,oBAAMD,KAAM,WAAYC,QAP5B,yFAUE,YAAC,IAAD,MACA,YAAC,IAAD,KACE,YAAC,IAAD,CAAOC,SAAUC,IAASC,UAC1B,YAAC,IAAD,CACEC,OAAQC,KAAKT,MAAMU,KAAKC,QAAQC,MAAM,GAAGhB,KAAKiB,cAAcL,SAE9D,YAAC,EAAD,CAAUR,MAAOS,KAAKT,MAAMU,KAAKI,kBAAkBF,SAErD,YAAC,IAAD,Q,GA3BqBG,aAiChBC,EAAY","file":"component---src-pages-projects-tsx-171bb6c32ebca833afab.js","sourcesContent":["import * as React from 'react';\nimport { HeaderWrapper } from '../../styles/styles';\nimport { memo } from 'react';\n\ninterface IPageHeaderProps {\n  heading: string;\n  subHeading: string;\n}\n\nconst PageHeader = ({ heading, subHeading }: IPageHeaderProps) => (\n  <HeaderWrapper>\n    <h1>{heading}</h1>\n    <h3>{subHeading}</h3>\n  </HeaderWrapper>\n);\n\nexport default memo(PageHeader);\n","import styled from '@emotion/styled';\n\nexport const ProjectsListWrapper = styled.section`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import * as React from 'react';\nimport { memo } from 'react';\nimport {\n  ProjectCard,\n  ProjectCardContent,\n  ProjectCardHeading,\n  ProjectCardImage,\n} from '../../styles/styles';\n\ninterface IProjectCard {\n  index: number;\n  project: {\n    excerpt: string;\n    frontmatter: {\n      title: string;\n      date: string;\n      featuredImage: string;\n    };\n    id: string;\n    timeToRead: number;\n  };\n}\n\nconst Project = (project: IProjectCard) => {\n  const tiltImageViaIndex = (index: number) =>\n    index % 2 ? 'tilt-right' : 'tilt-left';\n  return (\n    <ProjectCard>\n      <ProjectCardImage\n        src={project.project.frontmatter.featuredImage}\n        className={tiltImageViaIndex(project.index)}\n        alt=\"TODO Image\"\n      />\n      <ProjectCardHeading>\n        {project.project.frontmatter.title}\n      </ProjectCardHeading>\n      <ProjectCardContent>\n        <p>{project.project.excerpt}</p>\n      </ProjectCardContent>\n    </ProjectCard>\n  );\n};\n\nexport default memo(Project);\n","import * as React from 'react';\nimport { ProjectsListWrapper } from './projectList.style';\nimport { memo } from 'react';\nimport Project from '../project/Project';\nimport { IProject } from '../../models/project.types';\n\ninterface IProjects {\n  projects: Array<IProject>;\n}\n\nconst ProjectList = (projects: IProjects) => {\n  const renderProjects = (projects: IProjects) =>\n    projects.projects.map((project, index) => (\n      <Project key={project.node.id} project={project.node} index={index} />\n    ));\n\n  return <ProjectsListWrapper>{renderProjects(projects)}</ProjectsListWrapper>;\n};\n\nexport default memo(ProjectList);\n","import styled from '@emotion/styled';\n\nexport const ProjectsMain = styled.main`\n  grid-area: main;\n\n  padding: 1rem;\n  position: relative;\n\n  @media (min-width: 45em) {\n    padding: 0;\n    width: 100%;\n    margin: 0 auto;\n  }\n`;\n","import * as React from 'react';\nimport ProjectList from './projectList';\nimport { memo } from 'react';\nimport PageHeader from '../contact/pageHeader';\nimport { ProjectsMain } from './projects.style';\nimport { IEdge } from '../../models/shared.types';\n\ninterface IProjectsProps {\n  props: Array<IEdge>;\n}\n\nconst Projects = (projects: IProjectsProps) => (\n  <ProjectsMain>\n    <PageHeader\n      heading={'Projects'}\n      subHeading={'List of my finished or ongoing projects'}\n    />\n    <ProjectList projects={projects.props} />\n  </ProjectsMain>\n);\n\nexport default memo(Projects);\n","import * as React from 'react';\nimport { graphql } from 'gatsby';\nimport { Main } from '../styles/styles';\nimport Footer from '../components/footer';\n\nimport Navigation from '../components/navigation';\nimport Blobs, { PageType } from '../blobs/blobs';\nimport Banner from '../components/banner';\nimport Projects from '../components/projects/projects';\nimport Helmet from 'react-helmet';\nimport { ProjectPageProps } from '../models/project.types';\n\nimport '../styles/index.css';\n\nexport default class extends React.Component<ProjectPageProps, {}> {\n  constructor(props: any, context: Object) {\n    super(props, context);\n  }\n\n  public render() {\n    const title = 'Elliot Evans - Contact';\n    const desc = 'Contact Page';\n    const keywords =\n      'Front End Developer, Web Application Developer, Web Developer, Javascript Developer';\n\n    return (\n      <div className={'appGrid'}>\n        <Helmet>\n          <title>{title}</title>\n          <meta name={'description'} content={desc} />\n          <meta name={'keywords'} content={keywords} />\n        </Helmet>\n\n        <Navigation />\n        <Main>\n          <Blobs pageType={PageType.DEFAULT} />\n          <Banner\n            header={this.props.data.allFile.edges[0].node.childSiteJson.header}\n          />\n          <Projects props={this.props.data.allMarkdownRemark.edges} />\n        </Main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n            featuredImage\n          }\n          excerpt\n          timeToRead\n        }\n      }\n    }\n    allFile(\n      filter: { name: { eq: \"header\" }, sourceInstanceName: { eq: \"site\" } }\n    ) {\n      edges {\n        node {\n          id\n          childSiteJson {\n            id\n            header {\n              icon\n              heading\n              subHeading\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}