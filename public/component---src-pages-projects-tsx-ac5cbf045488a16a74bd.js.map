{"version":3,"sources":["webpack:///./src/components/contact/pageHeader.tsx","webpack:///./src/components/projects/ProjectList.style.tsx","webpack:///./src/components/project/Project.tsx","webpack:///./src/components/projects/projectList.tsx","webpack:///./src/components/projects/projects.style.tsx","webpack:///./src/components/projects/projects.tsx","webpack:///./src/pages/projects.tsx"],"names":["PageHeader","heading","subHeading","ProjectsListWrapper","memo","project","index","src","className","projects","map","key","node","id","excerpt","renderProjects","ProjectsMain","props","context","render","console","log","this","location","pathname","header","data","allFile","edges","childSiteJson","allMarkdownRemark","React","pageQuery"],"mappings":"6FAAA,sCAYeA,IAPI,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,WAAZ,OACjB,YAAC,IAAD,KACE,sBAAKD,GACL,sBAAKC,M,6ICNIC,EAAsB,uBAAH,mBAAG,CAAH,wG,YCgBjBC,kBAbC,SAACC,GACf,IAA2BC,EAC3B,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAkBC,IAAK,QAASC,WAHTF,EAGsCD,EAAQC,MAH5BA,EAAQ,EAAI,aAAe,eAIpE,YAAC,IAAD,KAAqBD,EAAQA,SAC7B,YAAC,IAAD,KACE,qBAAIA,EAAQA,cCkBLD,kBATK,SAACK,GAMnB,OAAO,YAACN,EAAD,KALgB,SAACM,GAAD,OACrBA,EAASA,SAASC,KAAK,SAACL,EAASC,GAAV,OACrB,YAAC,EAAD,CAASK,IAAKN,EAAQO,KAAKC,GAAIR,QAASA,EAAQO,KAAKE,QAASR,MAAOA,OAG5CS,CAAeN,O,YCzBjCO,EAAe,oBAAH,oBAAG,CAAH,qICgBVZ,kBAZE,SAACK,GAChB,OACE,YAACO,EAAD,KACE,YAAC,IAAD,CACEf,QAAS,WACTC,WAAY,4CAEd,YAAC,EAAD,CAAaO,SAAUA,EAASQ,Y,4GC+CpC,WAAYA,EAAYC,GAAc,OACpC,YAAMD,EAAOC,IADuB,K,0GAI/BC,OAAP,WAGE,OAFAC,QAAQC,IAAI,eAAgBC,KAAKL,OAG/B,mBAAKT,UAAW,WACd,YAAC,IAAD,MACA,YAAC,aAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAOS,MAAOK,KAAKL,MAAMM,SAASC,WAClC,YAAC,IAAD,CACEC,OACEH,KAAKL,MAAMS,KAAKC,QAAQC,MAAM,GAAGhB,KAAKiB,cAAcJ,SAGxD,YAAC,EAAD,CAAUR,MAAOK,KAAKL,MAAMS,KAAKI,kBAAkBF,UAGvD,YAAC,IAAD,Q,GAtBqBG,aA4BhBC,EAAY","file":"component---src-pages-projects-tsx-ac5cbf045488a16a74bd.js","sourcesContent":["// @flow\n\nimport React from 'react';\nimport { HeaderWrapper } from '../../styles/styles';\n\nconst PageHeader = ({ heading, subHeading }) => (\n  <HeaderWrapper>\n    <h1>{heading}</h1>\n    <h3>{subHeading}</h3>\n  </HeaderWrapper>\n);\n\nexport default PageHeader;\n","import styled from '@emotion/styled';\n\nexport const ProjectsListWrapper = styled.section`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import * as React from 'react';\nimport { memo } from 'react';\nimport { ProjectCard, ProjectCardContent, ProjectCardHeading, ProjectCardImage } from '../../styles/styles';\n\n// TODO: switch the class on the project card image\nconst Project = (project: any) => {\n  const tiltImageViaIndex = (index: number) => index % 2 ? 'tilt-right' : 'tilt-left';\n  return (\n    <ProjectCard>\n      <ProjectCardImage src={'blank'} className={tiltImageViaIndex(project.index)}/>\n      <ProjectCardHeading>{project.project}</ProjectCardHeading>\n      <ProjectCardContent>\n        <p>{project.project}</p>\n      </ProjectCardContent>\n    </ProjectCard>\n  );\n};\n\nexport default memo(Project);\n","import * as React from 'react';\nimport { ProjectsListWrapper } from './ProjectList.style';\nimport { memo } from 'react';\nimport Project from '../project/Project';\n\ninterface IProjects {\n  projects: Array<IProject>;\n}\n\ninterface IProject {\n  node: {\n    excerpt: string;\n    frontmatter: {\n      title: string;\n      date: Date;\n    };\n    id: string;\n    timeToRead: number;\n  }\n}\n\nconst ProjectList = (projects: IProjects) => {\n  const renderProjects = (projects: IProjects) =>\n    projects.projects.map( (project, index) => (\n      <Project key={project.node.id} project={project.node.excerpt} index={index}/>\n    ));\n\n  return <ProjectsListWrapper>{renderProjects(projects)}</ProjectsListWrapper>;\n};\n\nexport default memo(ProjectList);\n","import styled from '@emotion/styled';\n\nexport const ProjectsMain = styled.main`\n  grid-area: main;\n\n  padding: 1rem;\n  position: relative;\n\n  @media (min-width: 45em) {\n    padding: 0;\n    width: 100%;\n    margin: 0 auto;\n  }\n`;\n","import * as React from 'react';\nimport ProjectList from './projectList';\nimport { memo } from 'react';\nimport PageHeader from '../contact/pageHeader';\nimport { ProjectsMain } from './projects.style';\n\nconst Projects = (projects: any) => {\n  return (\n    <ProjectsMain>\n      <PageHeader\n        heading={'Projects'}\n        subHeading={'List of my finished or ongoing projects'}\n      />\n      <ProjectList projects={projects.props} />\n    </ProjectsMain>\n  );\n};\n\nexport default memo(Projects);\n","import * as React from 'react';\nimport { graphql } from 'gatsby';\nimport { Main } from '../styles/styles';\nimport Footer from '../components/footer';\n\n// default style stuff\nimport '../styles/index.css';\n\n// home stuff\nimport Navigation from '../components/navigation';\nimport { Home } from '../components/home/home';\nimport Blobs from '../blobs/blobs';\nimport Banner from '../components/banner';\nimport Projects from '../components/projects/projects';\n\ninterface IndexPageProps {\n  location: Location;\n  data: {\n    allMarkdownRemark: {\n      edges: Array<IEdge>;\n    };\n    allFile: IHeaderQuery;\n  };\n}\n\ninterface IHeaderQuery {\n  edges: Array<IHeaderNode>;\n}\n\ninterface IHeaderNode {\n  node: {\n    id: string;\n    childSiteJson: {\n      id: string;\n      header: IHeader;\n    };\n  };\n}\n\nexport interface IEdge {\n  node: INode;\n}\n\nexport interface INode {\n  excerpt: string;\n  timeToRead: number;\n  frontmatter: {\n    date: string;\n    title: string;\n  };\n  id: string;\n}\n\nexport interface IHeader {\n  icon: string;\n  heading: string;\n  subHeading: string;\n}\n\nexport default class extends React.Component<IndexPageProps, {}> {\n  constructor(props: any, context: any) {\n    super(props, context);\n  }\n\n  public render() {\n    console.log(\"this.props: \", this.props);\n\n    return (\n      <div className={'appGrid'}>\n        <Navigation />\n        <React.StrictMode>\n          <Main>\n            <Blobs props={this.props.location.pathname} />\n            <Banner\n              header={\n                this.props.data.allFile.edges[0].node.childSiteJson.header\n              }\n            />\n            <Projects props={this.props.data.allMarkdownRemark.edges} />\n          </Main>\n        </React.StrictMode>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          excerpt\n          timeToRead\n        }\n      }\n    }\n    allFile(\n      filter: { name: { eq: \"header\" }, sourceInstanceName: { eq: \"site\" } }\n    ) {\n      edges {\n        node {\n          id\n          childSiteJson {\n            id\n            header {\n              icon\n              heading\n              subHeading\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n// export const pageQuery = graphql`\n//   query {\n//     allMarkdownRemark {\n//       totalCount\n//       edges {\n//         node {\n//           id\n//           frontmatter {\n//             title\n//             date(formatString: \"DD MMMM, YYYY\")\n//           }\n//           excerpt\n//           timeToRead\n//         }\n//       }\n//     }\n//     allFile(\n//       filter: { name: { eq: \"header\" }, sourceInstanceName: { eq: \"data\" } }\n//     ) {\n//       edges {\n//         node {\n//           id\n//           childDataJson {\n//             id\n//             header {\n//               icon\n//               heading\n//               subHeading\n//             }\n//           }\n//         }\n//       }\n//     }\n//   }\n// `;\n"],"sourceRoot":""}