{"version":3,"sources":["webpack:///./src/templates/blog-post.tsx"],"names":["data","className","props","pageType","header","allFile","edges","node","childSiteJson","markdownRemark","frontmatter","title","dangerouslySetInnerHTML","__html","html","query"],"mappings":"2FAAA,mIAsBe,sBAAkC,IAA/BA,EAA+B,EAA/BA,KAChB,OACE,mBAAKC,UAAW,WACd,YAAC,IAAD,MACA,YAAC,IAAD,KAEE,YAAC,IAAD,CAAOC,MAAO,OAAQC,SAAU,SAChC,YAAC,IAAD,CACEC,OACEJ,EAAKK,QAAQC,MAAM,GAAGC,KAAKC,cAAcJ,SAG7C,YAAC,IAAD,KACE,sBAAKJ,EAAKS,eAAeC,YAAYC,OACrC,mBAAKC,wBAAyB,CAAEC,OAAQb,EAAKS,eAAeK,UAGhE,YAAC,IAAD,QAKC,IAAMC,EAAQ","file":"component---src-templates-blog-post-tsx-aa62404565d25cefa376.js","sourcesContent":["import * as React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Navigation from '../components/navigation';\nimport { BlogPostWrapper, Main } from '../styles/styles';\nimport Blobs from '../blobs/blobs';\nimport Footer from '../components/footer';\nimport Banner from '../components/banner';\nimport { IHeaderQuery } from '../pages';\n\ninterface IndexBlogPostProps {\n  data: {\n    markdownRemark: {\n      frontmatter: {\n        date: string;\n        title: string;\n      };\n      html: any;\n    };\n    allFile: IHeaderQuery;\n  };\n}\n\nexport default ({ data }: IndexBlogPostProps) => {\n  return (\n    <div className={'appGrid'}>\n      <Navigation />\n      <Main>\n        {/*<Blobs props={location.pathname} pageType={\"post\"} />*/}\n        <Blobs props={\"test\"} pageType={\"post\"} />\n        <Banner\n          header={\n            data.allFile.edges[0].node.childSiteJson.header\n          }\n        />\n        <BlogPostWrapper>\n          <h1>{data.markdownRemark.frontmatter.title}</h1>\n          <div dangerouslySetInnerHTML={{ __html: data.markdownRemark.html }} />\n        </BlogPostWrapper>\n      </Main>\n      <Footer/>\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n      }\n    }\n    allFile(\n      filter: { name: { eq: \"header\" }, sourceInstanceName: { eq: \"site\" } }\n    ) {\n      edges {\n        node {\n          id\n          childSiteJson {\n            id\n            header {\n              icon\n              heading\n              subHeading\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}