{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/front-end-silver-bullet/","result":{"data":{"markdownRemark":{"html":"<p>Over the course of the past few months working on a car configurator project for a car company and its been apparent\nthat we are not following the latest and greatest ideas from the the big development companies (google for example). I\nfor one would find this frustrating, with my own internal thoughts pointing to google being this ‘can say no wrong’\ncompany in terms of new approaches and philosophies to creating and archeting your applications, despite this I have\nfound that I am drifting further away from this point of view as time goes on.</p>\n<p>When google does say that ‘x’ approach is good because of ‘y, z’ reasons, people would stand up and listen. When\ndevelopers talk about it, a lot of other developers from different companies can see how it can benefit their own\napplications but not all developers. Some companies would have their own approach to the problems they need to solve. I\nalways thought this was due to legacy code or the inability to implement the ‘new’ solution but it is not the case.</p>\n<p>Much like the whole philosophy of ‘the newest javascript framework is best because it is the youngest’, the idea that\nthe best way to architecture an app is the latest idea is not true. Every idea and concept has its own place in the\nfront-end world and each solution is different because is solves different problems and that may not be apparent to the\noutside world but when you work and live inside that system then it makes sense it work on it a different way.</p>\n<p>The title to this post is ‘The Front-end Silver Bullet’ and many of you are here to hear about it but I am sorry to say\nthere is no such thing as a front-end silver bullet, subsequently I will go through an example. If I create an app for\nown website for example it will be simple and limited. The website is not complex nor is it requiring any back-end API\ncalls, only cached resources. It would not the best implementation to create a complex state to persist on all pages nor\nwould it be best to create a new instance of the application on every page. On the other hand having a complex\napplication would require a complicated front-end system to be able to stay clean and fresh and in addition persist\ncertain key data from page to page. In this example one way to architect a front-end application is not true.</p>\n<p>To conclude, it is down the nature what the application is supposed to do and what the application is consuming to best\napproach what frameworks to use how best architect the solution.</p>","frontmatter":{"title":"The Front-end Silver Bullet","date":"01 March, 2019","intro":""},"timeToRead":2},"allFile":{"edges":[{"node":{"id":"f65f7008-4ad0-59fa-89b8-6c5f8b3ea230","childSiteJson":{"id":"18a4403d-af10-5ad2-802f-b0a75fb71641","header":{"icon":"../assets/images/header-icon.webp","heading":"Elliot Evans"}}}}]}},"pageContext":{"slug":"/front-end-silver-bullet/"}},"staticQueryHashes":[]}